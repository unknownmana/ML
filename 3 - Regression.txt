from sklearn.preprocessing import PolynomialFeatures
import numpy as np,pandas as pd,matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression,Ridge
from sklearn.metrics import mean_squared_error,r2_score

x = 2*np.random.rand(100,1)
y = (2*x**2)+(3*x)+4+np.random.randn(100,1)

plt.scatter(x,y)

lr = LinearRegression()
lr.fit(x,y)
y_pred_lr = lr.predict(x)

mse_lr = mean_squared_error(y_pred_lr,y)
r2_lr = r2_score(y_pred_lr,y)

print(f"Linear Regression: MSE = {mse_lr}, R2 = {r2_lr}")

plt.scatter(x,y)
plt.plot(x,y_pred_lr,color='red')

poly = PolynomialFeatures(degree=2,include_bias=False)
x_poly = poly.fit_transform(x)

poly_reg = LinearRegression()
poly_reg.fit(x_poly,y)

y_pred_poly = poly_reg.predict(x_poly)

mse_poly = mean_squared_error(y_pred_poly,y)
r2_poly = r2_score(y_pred_poly,y)
print(f"Polynomial Regression: MSE = {mse_poly}, R2 = {r2_poly}")

x_range = np.linspace(min(x),max(x),500).reshape(-1,1)
x_range_poly = poly.transform(x_range)
y_range_poly = poly_reg.predict(x_range_poly)

plt.scatter(x,y)
plt.plot(x_range,y_range_poly,color='red')

rid_reg = Ridge(alpha=1.0)
rid_reg.fit(x,y)

y_pred_rid = rid_reg.predict(x)

mse_rid = mean_squared_error(y_pred_rid,y)
r2_rid = r2_score(y_pred_rid,y)
print(f"Ridge Regression: MSE = {mse_rid}, R2 = {r2_rid}")


plt.scatter(x,y)
plt.plot(x,y_pred_rid,color='red')

print(f"Linear Regression: MSE = {mse_lr}, R2 = {r2_lr}")
print(f"Polynomial Regression: MSE = {mse_poly}, R2 = {r2_poly}")
print(f"Ridge Regression: MSE = {mse_rid}, R2 = {r2_rid}")